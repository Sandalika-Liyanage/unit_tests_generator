# Auto-generated tests using AI-powered multi-agent analysis
# Source file: app\main.py
# Generated by LangGraph Test Generator

import pytest
from unittest.mock import Mock, patch

# Test 1
import pytest
from fastapi.testclient import TestClient
from main import app

client = TestClient(app)

def test_read_root():
    """
    This test validates that the read_root function returns a welcome message
    """
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"message": "Welcome to Calculator API"}

# Test 2
import pytest
from fastapi.testclient import TestClient
from app.main import app
from app.calculator import Calculator

client = TestClient(app)

def test_add_function_with_valid_numbers():
    """
    This test validates that the add function correctly adds two numbers
    """
    response = client.get("/add", params={"a": 5, "b": 3})
    assert response.status_code == 200
    assert response.json() == {"result": 8}

# Test 3
import pytest
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_add_invalid_inputs():
    """
    Test add function with invalid inputs.
    This test validates that the add function throws a type error when one or both parameters are not numbers.
    """
    response = client.get("/add", params={"a": "five", "b": 3})
    assert response.status_code == 422
    assert response.json() == {"detail": [{"loc": ["query", "a"], "msg": "value is not a valid float", "type": "type_error.float"}]}

# Test 4
import pytest
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_subtract():
    """
    Test the subtract function with valid numbers.
    This test validates that the subtract function correctly subtracts two numbers.
    """
    response = client.get("/subtract?a=5&b=3")
    assert response.status_code == 200
    assert response.json() == {"result": 2}

def test_subtract_edge_case():
    """
    Test the subtract function with edge case.
    This test validates that the subtract function correctly handles edge cases.
    """
    response = client.get("/subtract?a=5&b=5")
    assert response.status_code == 200
    assert response.json() == {"result": 0}

def test_subtract_invalid_input():
    """
    Test the subtract function with invalid input.
    This test validates that the subtract function correctly handles invalid input.
    """
    response = client.get("/subtract?a=5&b=abc")
    assert response.status_code == 422

# Test 5
import pytest
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_subtract_with_invalid_inputs():
    """
    This test validates that the subtract function throws a type error 
    when one or both parameters are not numbers
    """
    response = client.get("/subtract?a=five&b=3")
    assert response.status_code == 422
    assert "detail" in response.json()
    assert "value is not a valid float" in str(response.json()["detail"])

# Test 6
import pytest
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_multiply():
    """
    This test validates that the multiply function correctly multiplies two numbers
    """
    response = client.get("/multiply", params={"a": 5, "b": 3})
    assert response.status_code == 200
    assert response.json() == {"result": 15}

def test_multiply_zero():
    """
    This test validates that the multiply function correctly handles multiplication by zero
    """
    response = client.get("/multiply", params={"a": 5, "b": 0})
    assert response.status_code == 200
    assert response.json() == {"result": 0}

def test_multiply_negative():
    """
    This test validates that the multiply function correctly handles multiplication of negative numbers
    """
    response = client.get("/multiply", params={"a": -5, "b": 3})
    assert response.status_code == 200
    assert response.json() == {"result": -15}

# Test 7
import pytest
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_multiply_with_invalid_inputs():
    """
    This test validates that the multiply function throws a type error 
    when one or both parameters are not numbers
    """
    response = client.get("/multiply", params={"a": "five", "b": 3})
    assert response.status_code == 422
    assert "detail" in response.json()
    assert "value is not a valid float" in str(response.json()["detail"])

# Test 8
import pytest
from fastapi.testclient import TestClient
from app.main import app
from app.calculator import Calculator

client = TestClient(app)

def test_divide_function_with_valid_numbers():
    """
    This test validates that the divide function correctly divides two numbers
    """
    response = client.get("/divide", params={"a": 6, "b": 3})
    assert response.status_code == 200
    assert response.json() == {"result": 2}

def test_divide_function_with_zero_division():
    """
    This test validates that the divide function correctly handles division by zero
    """
    response = client.get("/divide", params={"a": 6, "b": 0})
    assert response.status_code == 400
    assert response.json() == {"detail": "Cannot divide by zero"}

# Test 9
import pytest
from fastapi.testclient import TestClient
from app.main import app
from app.calculator import Calculator

client = TestClient(app)

def test_divide_with_invalid_inputs():
    """
    This test validates that the divide function throws a type error 
    when one or both parameters are not numbers
    """
    response = client.get("/divide", params={"a": "six", "b": 3})
    assert response.status_code == 422
    assert response.json() == {
        "detail": [
            {
                "loc": ["query", "a"],
                "msg": "value is not a valid float",
                "type": "type_error.float",
            }
        ]
    }

# Test 10
import pytest
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_divide_function_with_zero_as_second_number():
    """
    This test validates that the divide function throws a ZeroDivisionError when the second number is zero
    """
    response = client.get("/divide", params={"a": 6, "b": 0})
    assert response.status_code == 400
    assert response.json() == {"detail": "Cannot divide by zero"}

# Test 11
import pytest
from fastapi.testclient import TestClient
from main import app, PowerRequest
from unittest.mock import patch

client = TestClient(app)

@patch('main.Calculator.power')
def test_power_function_with_valid_numbers(mock_power):
    """
    This test validates that the power function correctly calculates the power of a number
    """
    mock_power.return_value = 8
    request = PowerRequest(base=2, exponent=3)
    response = client.post("/power", json=request.dict())
    assert response.status_code == 200
    assert response.json() == {"result": 8}
    mock_power.assert_called_once_with(2, 3)

# Test 12
import pytest
from fastapi.testclient import TestClient
from app.main import app
from app.calculator import Calculator
from pydantic import ValidationError

client = TestClient(app)

def test_power_function_with_invalid_inputs():
    """
    This test validates that the power function throws a type error 
    when one or both parameters are not numbers
    """
    request = {'base': 'two', 'exponent': 3}
    response = client.post("/power", json=request)
    assert response.status_code == 422
    assert "detail" in response.json()
    assert any(error.get('type') == 'type_error.float' for error in response.json().get('detail'))

# Test 13
import pytest
from fastapi.testclient import TestClient
from app.main import app
from app.calculator import Calculator

client = TestClient(app)

def test_sqrt_function_with_valid_number():
    """
    This test validates that the sqrt function correctly calculates the square root of a number
    """
    # Arrange
    request = {'number': 9}
    expected_output = 3

    # Act
    response = client.post("/sqrt", json=request)

    # Assert
    assert response.status_code == 200
    assert response.json() == {"result": expected_output}

def test_sqrt_function_with_negative_number():
    """
    This test validates that the sqrt function correctly handles negative numbers
    """
    # Arrange
    request = {'number': -9}

    # Act
    response = client.post("/sqrt", json=request)

    # Assert
    assert response.status_code == 400
    assert "Cannot calculate square root of negative number" in response.text

def test_sqrt_function_with_zero():
    """
    This test validates that the sqrt function correctly handles zero
    """
    # Arrange
    request = {'number': 0}
    expected_output = 0

    # Act
    response = client.post("/sqrt", json=request)

    # Assert
    assert response.status_code == 200
    assert response.json() == {"result": expected_output}

# Test 14
import pytest
from fastapi.testclient import TestClient
from main import app
from pydantic import ValidationError

client = TestClient(app)

def test_sqrt_function_with_invalid_input():
    """
    This test validates that the sqrt function throws a type error when the parameter is not a number
    """
    response = client.post("/sqrt", json={"number": "nine"})
    assert response.status_code == 422
    assert "detail" in response.json()
    assert isinstance(response.json()["detail"], list)
    assert "msg" in response.json()["detail"][0]
    assert response.json()["detail"][0]["msg"] == "value is not a valid float"

# Test 15
import pytest
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_sqrt_function_with_negative_number():
    """
    This test validates that the sqrt function throws a ValueError when the parameter is a negative number
    """
    response = client.post("/sqrt", json={"number": -9})
    assert response.status_code == 400
    assert response.json() == {"detail": "Cannot calculate square root of a negative number"}

# Test 16
import pytest
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_calculate_function_with_valid_inputs():
    """
    This test validates that the calculate function correctly performs various calculations based on operation type
    """
    response = client.get("/add", params={"a": 5, "b": 3})
    assert response.status_code == 200
    assert response.json() == {"result": 8}

# Test 17
import pytest
from fastapi.testclient import TestClient
from main import app
from pydantic import ValidationError

client = TestClient(app)

def test_calculate_function_with_invalid_inputs():
    """
    This test validates that the calculate function throws a type error when one or both parameters in the request are not numbers
    """
    response = client.get("/add", params={"a": "five", "b": 3})
    assert response.status_code == 422
    assert "detail" in response.json()
    assert isinstance(response.json()["detail"], list)
    assert "msg" in response.json()["detail"][0]
    assert response.json()["detail"][0]["msg"] == "value is not a valid float"

# Test 18
import pytest
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_calculate_invalid_operation():
    """
    This test validates that the calculate function throws an error when the operation is not a valid operation
    """
    response = client.get("/invalid", json={"a": 5, "b": 3})
    assert response.status_code == 404
    assert response.json() == {"detail": "Not Found"}

# Test 19
import pytest
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_calculate_division_by_zero():
    """
    This test validates that the calculate function throws a ZeroDivisionError 
    when the operation is division and the second number is zero
    """
    response = client.get("/divide", params={"a": 6, "b": 0})
    assert response.status_code == 400
    assert response.json() == {"detail": "Cannot divide by zero"}

# Test 20
import pytest
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_calculate_sqrt_negative_number():
    """
    This test validates that the calculate function throws a ValueError when the operation is square root and the number is negative
    """
    response = client.post("/power", json={"number": -9})
    assert response.status_code == 400
    assert response.json() == {"detail": "Cannot calculate square root of a negative number"}

