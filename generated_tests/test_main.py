# Auto-generated tests using AI-powered multi-agent analysis
# Source file: app\main.py
# Generated by LangGraph Test Generator

import pytest
from unittest.mock import Mock, patch

# Test 1
import pytest
from fastapi.testclient import TestClient
from main import app

@pytest.fixture
def client():
    return TestClient(app)

def test_read_root_happy_path(client):
    """
    Validate that the function returns a welcome message when called without any parameters
    """
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"message": "Welcome to Calculator API"}

# Test 2
import pytest
from fastapi.testclient import TestClient
from main import app
from unittest.mock import patch

client = TestClient(app)

@patch('main.Calculator.add')
def test_add_happy_path(mock_add):
    """
    Test the add function to ensure it correctly adds two numbers.
    """
    # Arrange
    test_inputs = {"a": 5, "b": 3}
    expected_output = 8
    mock_add.return_value = expected_output

    # Act
    response = client.get("/add", params=test_inputs)

    # Assert
    assert response.status_code == 200
    assert response.json() == {"result": expected_output}
    mock_add.assert_called_once_with(test_inputs["a"], test_inputs["b"])

# Test 3
import pytest
from fastapi.testclient import TestClient
from main import app

client = TestClient(app)

def test_add_type_error():
    """
    Validate that the function raises a type error when one or both parameters are not numbers
    """
    response = client.get("/add", params={"a": "five", "b": 3})
    assert response.status_code == 422
    assert "detail" in response.json()
    assert any(error.get('type') == 'type_error.float' for error in response.json().get('detail'))

# Test 4
import pytest
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_subtract_happy_path():
    """
    Test the subtract function to ensure it correctly subtracts two numbers.
    """
    response = client.get("/subtract", params={"a": 5, "b": 3})
    assert response.status_code == 200
    assert response.json() == {"result": 2}

def test_subtract_edge_case():
    """
    Test the subtract function with edge case where both numbers are the same.
    """
    response = client.get("/subtract", params={"a": 5, "b": 5})
    assert response.status_code == 200
    assert response.json() == {"result": 0}

def test_subtract_negative_result():
    """
    Test the subtract function where the result is a negative number.
    """
    response = client.get("/subtract", params={"a": 3, "b": 5})
    assert response.status_code == 200
    assert response.json() == {"result": -2}

# Test 5
import pytest
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_subtract_type_error():
    """
    Test to validate that the subtract function raises a TypeError when one or both parameters are not numbers.
    """
    response = client.get("/subtract", params={"a": "five", "b": 3})
    assert response.status_code == 422
    assert "detail" in response.json()
    assert "value_error.number.not_a_real" in str(response.json()["detail"])
    assert "a" in str(response.json()["detail"])

# Test 6
import pytest
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_multiply_happy_path():
    """
    Test case for the multiply function.
    This test validates that the function returns the product of two numbers.
    """
    # Define the test inputs
    test_inputs = {"a": 5, "b": 3}
    # Define the expected output
    expected_output = {"result": 15}

    # Call the multiply function with the test inputs
    response = client.get("/multiply", params=test_inputs)

    # Assert that the response status code is 200 (OK)
    assert response.status_code == 200
    # Assert that the response data matches the expected output
    assert response.json() == expected_output

# Test 7
import pytest
from fastapi.testclient import TestClient
from main import app

client = TestClient(app)

def test_multiply_type_error():
    """
    Test to validate that the multiply function raises a type error 
    when one or both parameters are not numbers
    """
    response = client.get("/multiply", params={"a": "five", "b": 3})
    assert response.status_code == 422
    assert "detail" in response.json()
    assert any(error.get('type') == 'type_error.float' for error in response.json().get('detail'))

# Test 8
import pytest
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_divide_happy_path():
    """
    Test the divide function to ensure it correctly divides two numbers.
    """
    # Define the test inputs and expected output
    test_inputs = {"a": 5, "b": 3}
    expected_output = {"result": 1.6666666666666667}

    # Call the divide function with the test inputs
    response = client.get("/divide", params=test_inputs)

    # Assert that the response status code is 200 (OK)
    assert response.status_code == 200

    # Assert that the function output matches the expected output
    assert response.json() == expected_output

def test_divide_by_zero():
    """
    Test the divide function with a zero denominator to ensure it raises an HTTPException.
    """
    # Define the test inputs
    test_inputs = {"a": 5, "b": 0}

    # Call the divide function with the test inputs
    response = client.get("/divide", params=test_inputs)

    # Assert that the response status code is 400 (Bad Request)
    assert response.status_code == 400

    # Assert that the response detail is "Cannot divide by zero"
    assert response.json()["detail"] == "Cannot divide by zero"

# Test 9
import pytest
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_divide_type_error():
    """
    Validate that the function raises a type error when one or both parameters are not numbers
    """
    response = client.get("/divide", params={"a": "five", "b": 3})
    assert response.status_code == 422
    assert "detail" in response.json()
    assert "value is not a valid float" in str(response.json()["detail"])

# Test 10
import pytest
from fastapi import HTTPException
from fastapi.testclient import TestClient
from main import app

client = TestClient(app)

def test_divide_by_zero():
    """
    Test to validate that the divide function raises a HTTPException with status code 400 
    when the second number is zero.
    """
    response = client.get("/divide", params={"a": 5, "b": 0})
    assert response.status_code == 400
    assert response.json() == {"detail": "Cannot divide by zero"}

# Test 11
import pytest
from fastapi.testclient import TestClient
from main import app, PowerRequest

client = TestClient(app)

def test_power_happy_path():
    """
    Test case for power function
    This test validates that the function returns the power of the base to the exponent
    """
    request = PowerRequest(base=5, exponent=3)
    response = client.post("/power", json=request.dict())
    assert response.status_code == 200
    assert response.json() == {"result": 125}

# Test 12
import pytest
from fastapi.testclient import TestClient
from app.main import app
from app.calculator import Calculator

client = TestClient(app)

def test_power_type_error():
    """
    Test to validate that the power function raises a type error 
    when one or both parameters are not numbers
    """
    response = client.post("/power", json={"base": "five", "exponent": 3})
    assert response.status_code == 422
    assert "detail" in response.json()
    assert "value is not a valid float" in str(response.json()["detail"])

# Test 13
import pytest
from fastapi.testclient import TestClient
from app.main import app
from app.calculator import Calculator

client = TestClient(app)

def test_sqrt_happy_path():
    """
    Test case for the sqrt function
    Validate that the function returns the square root of a number
    """
    # Arrange
    test_input = {"number": 9}
    expected_output = {"result": 3}

    # Act
    response = client.post("/sqrt", json=test_input)

    # Assert
    assert response.status_code == 200
    assert response.json() == expected_output

def test_sqrt_edge_case():
    """
    Test case for the sqrt function
    Validate that the function returns an error for negative numbers
    """
    # Arrange
    test_input = {"number": -9}

    # Act
    response = client.post("/sqrt", json=test_input)

    # Assert
    assert response.status_code == 400
    assert "Cannot calculate square root of negative number" in response.text

# Test 14
import pytest
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_sqrt_type_error():
    """
    Test to validate that the sqrt function raises a TypeError when the parameter is not a number.
    """
    response = client.post("/sqrt", json={"number": "nine"})
    assert response.status_code == 422
    assert "detail" in response.json()
    assert "value is not a valid float" in str(response.json()["detail"])

# Test 15
import pytest
from fastapi import HTTPException
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_sqrt_negative_number():
    """
    Test to validate that the sqrt function raises a HTTPException with status code 400 
    when the number is negative
    """
    response = client.post("/sqrt", json={"number": -9})
    assert response.status_code == 400
    assert response.json() == {"detail": "Cannot calculate square root of a negative number"}

# Test 16
import pytest
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_calculate_happy_path():
    """
    Test the happy path of the calculate function.
    This test validates that the function returns the result of the operation.
    """
    # Arrange
    request = {"a": 5, "b": 3}
    operation = "add"
    expected_output = 8

    # Act
    if operation == "add":
        response = client.get("/add", params=request)

    # Assert
    assert response.status_code == 200
    assert response.json() == {"result": expected_output}

# Test 17
import pytest
from fastapi.testclient import TestClient
from main import app
from app.calculator import Calculator

client = TestClient(app)

def test_calculate_type_error():
    """
    Validate that the function raises a type error when one or both parameters in the request are not numbers
    """
    response = client.get("/add", params={"a": "five", "b": 3})
    assert response.status_code == 422
    assert "detail" in response.json()
    assert "value is not a valid float" in str(response.json()["detail"])

# Test 18
import pytest
from fastapi import HTTPException
from fastapi.testclient import TestClient
from main import app
from unittest.mock import patch, Mock

client = TestClient(app)

def test_calculate_unsupported_operation():
    """
    Test to validate that the function raises a HTTPException with status code 400 
    when the operation is not supported
    """
    with patch('app.Calculator') as mock_calculator:
        mock_calculator.mod.side_effect = AttributeError('Unsupported operation')
        
        response = client.get("/mod", json={"a": 5, "b": 3})
        
        assert response.status_code == 400
        assert response.json() == {"detail": "Unsupported operation"}

# Test 19
import pytest
from fastapi import HTTPException
from app.main import app
from fastapi.testclient import TestClient
from unittest.mock import patch, Mock

client = TestClient(app)

def test_calculate_division_by_zero():
    """
    Test to validate that the function raises a HTTPException with status code 400 
    when the operation is division and the second number is zero
    """
    with patch('app.main.Calculator.divide', side_effect=ZeroDivisionError):
        response = client.get("/divide", params={"a": 5, "b": 0})
        assert response.status_code == 400
        assert response.json() == {"detail": "Cannot divide by zero"}

# Test 20
import pytest
from fastapi import HTTPException
from fastapi.testclient import TestClient
from main import app, SquareRootRequest

client = TestClient(app)

def test_calculate_sqrt_negative_number():
    """
    Validate that the function raises a HTTPException with status code 400 
    when the operation is square root and the number is negative
    """
    request = SquareRootRequest(number=-9)
    response = client.post("/sqrt", json=request.dict())
    assert response.status_code == 400
    assert response.json() == {"detail": "Cannot calculate square root of a negative number"}

